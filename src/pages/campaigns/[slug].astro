---
import { client } from '../../lib/sanityClient.js';
import imageUrlBuilder from '@sanity/image-url';
import { toPlainText } from '../../lib/portableTextSerializer.js';

// Import the templates for different campaign types
import AdvocatesTemplate from '../../components/templates/AdvocatesTemplate.astro';
import InvestorRepsTemplate from '../../components/templates/InvestorRepsTemplate.astro';
import MarketingTemplate from '../../components/templates/MarketingTemplate.astro';
import SustainersTemplate from '../../components/templates/SustainersTemplate.astro';

// Map templates from Sanity to Astro components
const templateMap = {
  advocates: AdvocatesTemplate,
  investorReps: InvestorRepsTemplate,
  marketing: MarketingTemplate,
  sustainers: SustainersTemplate,
};

// Utility to build Sanity image URLs
const builder = imageUrlBuilder(client);
function urlFor(source) {
  return builder.image(source).url();
}

const { slug } = Astro.params;
const query = `*[_type == "campaign" && slug.current == $slug][0] {
  heading,
  heroCopy,
  body,
  heroImage,
  heroImageAlt,
  ctaText,
  ctaLink,
  templateType,
  contactEmail
}`;
const campaigns = await client.fetch(query, { slug }, { cache: 'no-store' });

if (!campaigns) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found',
  });
}
// Get the campaign data from props (for pre-rendered pages)
// Define the type of Astro.props to include a campaign property
interface CampaignProps {
  campaign?: {
    heading?: string;
    heroCopy?: string;
    body?: string;
    heroImage?: string;
    heroImageAlt?: string;
    ctaText?: string;
    ctaLink?: string;
    templateType?: string;
    contactEmail?: string;
  };
}

let campaign = (Astro.props as CampaignProps).campaign;

// If no campaign data (e.g., for an unknown slug), fetch it dynamically
if (!campaign) {
  const { slug } = Astro.params;
  const query = `*[_type == "campaign" && slug.current == $slug][0] {
    heading,
    heroCopy,
    body,
    heroImage,
    heroImageAlt,
    ctaText,
    ctaLink,
    templateType,
    contactEmail
  }`;
  campaign = await client.fetch(query, { slug });

  if (!campaign) {
    return new Response(null, {
      status: 404,
      statusText: 'Not Found',
    });
  }
}
console.log('Campaign data:', campaign);
console.log('Fetched campaign templateType:', campaign.templateType);
// Determine which template to use
const TemplateComponent = templateMap[campaign.templateType] || MarketingTemplate;
//const pageTitle = campaign.heading || "Campaign Page";
const pageTitle = campaign.heading ? toPlainText(campaign.heading) : "Campaign Page";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.png" type="image/svg+xml">
    <title>{pageTitle}</title>
  </head>
  <body>
    <section>
      {/* Render the template with campaign data */}
      {campaign && TemplateComponent && (
        <TemplateComponent campaignData={campaign} />
      )}

      {/* Display warning if template type is unknown */}
      {campaign && !templateMap[campaign.templateType] && (
        <div class="text-center py-10 text-orange-600">
          <p>Warning: Unknown template type '{campaign.templateType}'. Using default template.</p>
        </div>
      )}
    </section>
  </body>
</html>